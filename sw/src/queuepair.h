/**
 * @file rpc_server_thread.h
 * @brief Implementation of the RPC server thread.
 * @author Nikita Lazarev
 */
#ifndef _QUEUEPAIR_H_
#define _QUEUEPAIR_H_

#include <atomic>
#include <thread>
#include <utility>
#include <vector>

#include "connection_manager.h"
#include "nic.h"
#include "rpc_call.h"
#include "rpc_header.h"
#include "rx_queue.h"
#include "tx_queue.h"

namespace dagger {

/// The base class for the RPC server callback (RPC handler).
/// The RPC codegenerator extends (implements) this class to define the
/// server RPC stubs.
// class RpcServerCallBack_Base {
//  public:
//   RpcServerCallBack_Base(const std::vector<const void*>& rpc_fn_ptr)
//       : rpc_fn_ptr_(rpc_fn_ptr) {}
//   virtual ~RpcServerCallBack_Base() {}

//   /// The entrypoint to the server RPC handler.
//   virtual void operator()(const CallHandler handler, const RpcPckt* rpc_in,
//                           TxQueue& tx_queue) const = 0;

//  protected:
//   const std::vector<const void*>& rpc_fn_ptr_;
// };

/// This class implemens the basic functionality of an RPC server thread and
/// provides the interfaces with the hardware.
/// It encapsulates server hardware communication, RPC dispatch and worker
/// threads, and interfaces with the server RPC stubs.
class QueuePair {
 public:
  /// Construct server thread based on the nic's @param nic flow id
  /// @param nic_flow_id. The @param callback specifies the server RPC stubs
  /// generated by the RPC codegenerator and inheriting the
  /// RpcServerCallBack_Base class.
  QueuePair(const Nic* nic, size_t nic_flow_id, uint16_t queue_pair_num);
  virtual ~QueuePair();

  /// Connection management API.
  int connect(ConnectionId c_id, const IPv4& server_addr);
  int disconnect(ConnectionId c_id);

  /// These functions start/stop polling in the dispatch thread.
  /// @param pin_cpu is used to pin the dispatch thread to the given CPU core.
  int start_listening(int pin_cpu);
  void stop_listening();

  /// Get associated bound completion queue.
  CompletionQueue* get_completion_queue() const;

  int send();
  int recv();

 private:
  // Dispatch thread
  void _PullListen();

 private:
  uint16_t queue_pair_num_;

  // Underlying nic.
  const Nic* nic_;
  size_t nic_flow_id_;

  // Underlying Tx and RX queues.
  TxQueue tx_queue_;
  RxQueue rx_queue_;

  //Underlying completion queue
  std::unique_ptr<CompletionQueue> cq_;

  ConnectionId c_id_;

  // The RPC callback object.
  const RpcServerCallBack_Base* server_callback_;

  // Threads and signals.
  std::thread thread_;
  std::atomic<bool> stop_signal_;

#ifdef NIC_CCIP_DMA
  uint32_t current_batch_ptr;
  size_t batch_counter;
#endif
};

}  // namespace dagger

#endif  // _QUEUEPAIR_H_
